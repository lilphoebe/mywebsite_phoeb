#this analysis
sc <- success %>%
filter(species != "Shag")
#we'll use maximum june temperature as our climate indicator:
climate <- read.csv("clim_east_Scotland.csv")
#pulling out year & june max temp:
june <- climate %>%
filter(var == "tmax") %>%
select(Year, JUN) %>%
mutate(Year = as.numeric(Year)) %>%
filter(Year %in% sc$year)
#a function to find & assign temperature:
find_temp <- function(year) {
temperature <- june[june$Year == year,2]
}
#moving rowwise to assign temperature by year:
sc <- sc %>%
mutate(year = as.numeric(year)) %>%
rowwise() %>%
mutate(temp = ifelse(year %in% unique(june$Year),
find_temp(year),
NA)) %>%
ungroup()
#and modify sc to exclude years with no temperature data, and a little renaming for clarity:
sc <- sc %>%
filter(year >= 1986) %>%
rename(bs = value)
#adding a normalized year (ie, 1,2,3 etc rather than 1985...)
sc <- sc %>%
mutate(nyear = as.factor(year-1985))
#and scaling temperature so the mean is 0 and variation is represented by
#std deviations.
sc$temp <- scale(sc$temp, center = TRUE, scale = TRUE)
#let's visualize how temperature effects breeding success by species!
ggplot(sc, aes(x = temp, y = bs, color = species)) +
geom_point() +
facet_wrap(~species) +
theme_bw() +
scale_color_manual(values = birdpal) +
theme(legend.position = "none") +
labs(x= "temperature (standard deviations)", y="breeding success", title = "how temperature effects breeding success by species")
templine <- lm(temp ~ year, data = sc)
summary(templine)
ggplot(sc, aes(y = temp, x = year)) +
geom_smooth(method = "lm", se = TRUE) +
geom_point() +
theme_bw()
templine <- lm(temp ~ year, data = sc)
summary(templine)
ggplot(sc, aes(y = temp, x = year)) +
geom_smooth(method = "lm", se = TRUE) +
geom_point() +
theme_bw()
view(sc)
summary(templine)
ggplot(sc, aes(y = temp, x = year)) +
geom_smooth(method = "lm", se = TRUE) +
geom_point() +
theme_bw()
mixed2 <- lmer(bs ~ temp + (1|nyear) + (1|species), data = sc)
library(lme4)
library(lme4)
#here's how to read our model from left to right:
#we're seeing how bs (breeding success) is explained by temperature -
#and randomizing intercepts based on year and species.
mixed2 <- lmer(bs ~ temp + (1|nyear) + (1|species), data = sc)
summary(mixed2)
plot(mixed2)
qqnorm(resid(mixed2))
qqline(resid(mixed2))
library(sjPlot)
plot_model(mixed2, type = "re", show.values = TRUE)
plot_model(mixed2, show.values = TRUE)
plot(mixed2)
qqnorm(resid(mixed2))
qqline(resid(mixed2))
qqline(resid(mixed2))
plot(mixed2)
qqnorm(resid(mixed2))
qqline(resid(mixed2))
plot(mixed2)
qqnorm(resid(mixed2))
qqline(resid(mixed2))
plot(mixed2)
qqnorm(resid(mixed2))
library(ggeffects)
sp_both <- ggpredict(mixed2, terms = c("temp"))
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temperature does not predict breeding success in seabirds") +
scale_color_manual(values = birdpal) +
theme_bw()
#gg predict
?ggpredict
library(ggeffects)
#using ggpredict to predict output of model
sp_both <- ggpredict(mixed2, terms = c("temp"))
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temperature does not predict breeding success in seabirds") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temperature may explain some breeding success in auks") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temperature explains some changes in breeding success in auks") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temperature may explain variance in breeding success in auks") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temp explains some variance in breeding success in auks") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temp explains some variance in auk breeding success") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temp explains little variance in auk breeding success") +
scale_color_manual(values = birdpal) +
theme_bw()
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temp explains some variance in auk breeding success") +
scale_color_manual(values = birdpal) +
theme_bw()
auk <- read.csv("IoM_AukDiving.csv")
#converting start time and end time to "dive duration"
#and putting everything in POSIXct format.
auk <- auk %>%
mutate(StartTime = as.POSIXct(StartTime, tryFormats = c("%Y-%m-%d %H:%M:%OS")),
EndTime = as.POSIXct(EndTime, tryFormats = c("%Y-%m-%d %H:%M:%OS")),
Duration = EndTime - StartTime)
auk <- auk %>%
select(-StartTime, -EndTime)
auk <- auk %>%
mutate(Duration = as.numeric(Duration))
#let's look for outliers that could be monitor errors:
ggplot(auk, aes(x=Duration)) +
geom_histogram(bins = 30) +
xlim(-50, 400)
#We'll use 900 seconds as our upper limit on how long a dive could be.
auk <- auk %>%
filter(Duration < 900) %>%
filter(!is.na(Duration))
#filter out any obvious errors:
auk <- auk %>%
filter(Duration > 0)
#We'll use 900 seconds as our upper limit on how long a dive could be.
auk <- auk %>%
filter(Duration < 900) %>%
filter(!is.na(Duration))
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .5) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .85)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
auk <- read.csv("IoM_AukDiving.csv")
#converting start time and end time to "dive duration"
#and putting everything in POSIXct format.
auk <- auk %>%
mutate(StartTime = as.POSIXct(StartTime, tryFormats = c("%Y-%m-%d %H:%M:%OS")),
EndTime = as.POSIXct(EndTime, tryFormats = c("%Y-%m-%d %H:%M:%OS")),
Duration = EndTime - StartTime)
auk <- auk %>%
select(-StartTime, -EndTime)
auk <- auk %>%
mutate(Duration = as.numeric(Duration))
#let's look for outliers that could be monitor errors:
ggplot(auk, aes(x=Duration)) +
geom_histogram(bins = 30) +
xlim(-50, 400)
#filter out any obvious errors:
auk <- auk %>%
filter(Duration > 0)
#We'll use 900 seconds as our upper limit on how long a dive could be.
auk <- auk %>%
filter(Duration < 900) %>%
filter(!is.na(Duration))
bpal2 <- c(Guill = "#EFBDBD", Raz = "#BAD5EE", Puff = "#5071A0")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .5) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .85)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .5) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .4) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
bpal2 <- c(Guill = "#EFBDBD", Raz = "#FAA613", Puff = "#5071A0")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .4) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
bpal2 <- c(Guill = "#EFBDBD", Raz = "#FBD54B", Puff = "#5071A0")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .4) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
bpal2 <- c(Guill = "#EFBDBD", Raz = "#F5D778", Puff = "#5071A0")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Species)) +
geom_jitter(alpha = .4) +
scale_color_manual(values = bpal2) +
theme_bw() +
theme(legend.position = c(.85, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex)
theme(legend.position = c(.85, .85)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
spal <- c(F = "#922A1C", M = "#F06A60", NA = "#3E4E50")
spal <- c("F" = "#922A1C", "M" = "#F06A60", "NA" = "#3E4E50")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex)
spal <- c("F" = "#922A1C", "M" = "#F06A60", "NA" = "#3E4E50")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex) +
theme(legend.position = c(.85, .85)) +
scale_color_manual(values = spal) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
spal <- c("F" = "#922A1C", "M" = "#F06A60", NA = "#3E4E50")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex) +
theme(legend.position = c(.85, .85)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex) +
theme(legend.position = c(.9, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
ggplot(auk, aes(x=Duration, y=DiveDepth, color = Sex)) +
geom_jitter(alpha = .6, position = "jitter") +
theme_bw() +
facet_wrap(~Sex) +
theme(legend.position = c(.9, .80)) +
labs(x = "Dive Duration (seconds)", y = "Dive Depth (meters)",
title = "Diving Habits of Isle of May Auks")
library(tidyverse)
library(broom)
breeding <- read.csv("IMLOTSBSDataset1982-2016.csv")
colnames(breeding)
# the data is in wide format, so we'll pivot it to make a "species" column,
#and use regex to assign new, accurate column names.
br <- breeding %>%
pivot_longer(
cols = 2:13,
names_to = c("species", "type"),
names_pattern = "([\\w]+)[.]([\\w]+)")
colnames(br)
#now we'll pare it down to breeding success data:
success <- br %>%
filter(type == "BS")
head(success)
#looks good!
birdpal <- c(Guillemot = "#F7DEDE", Razorbill = "#BAD5EE", Puffin = "#5071A0", Shag = "#111A36", Kittiwake = "#922A1C", Fulmar = "#F06A60")
ggplot(success, aes(x=year, y=value, color = species)) +
geom_point() +
theme_bw() +
scale_color_manual(values = birdpal) +
ylab("breeding success")
#faceted with lines of best fit:
ggplot(success, aes(x=year, y=value, color=species)) +
geom_point() +
facet_wrap(~species) +
geom_smooth(method = "lm") +
theme_bw() +
theme(legend.position = "none") +
scale_color_manual(values = birdpal) +
ylab("breeding success")
bird_list <- unique(br$species)
t <- c("species", "slope", "conflo", "confhi", "r2", "adj r2", "pval")
r <- data.frame("species", "slope", "conflo", "confhi", "r2", "adj r2", "pval")
names(r) <- t
for (b in 1:length(bird_list)) {
bird <- bird_list[b]
df <- success %>%
filter(species == bird)
line <- lm(value ~ year, data = df)
slope <- round(tidy(line)[2,2],5)
conflo <- round(confint(line)[2,1],5)
confhi <- round(confint(line)[2,2],5)
r2 <- round(summary(line)$r.squared,5)
r2a <- round(summary(line)$adj.r.squared,5)
pval <- round(tidy(line)[2,5],5)
newvector <- c(bird, slope, conflo, confhi, r2, r2a, pval)
names(newvector) <- t
r <- rbind(r, newvector)
}
r <- r[-1,]
r %>%
mutate(confhi = as.numeric(confhi),
conflo = as.numeric(conflo),
conf.range = (confhi-conflo))
#visualizing our basic linear models
ggplot(success, aes(x=year, y=value, color=species)) +
geom_point(alpha = .4) +
geom_smooth(method = "lm", se=TRUE, alpha=.2) +
theme_bw() +
scale_color_manual(values=birdpal) +
ylab("breeding success") +
theme(legend.position = c(.1,.70),
legend.text = element_text(size=8),
legend.title = element_text(size=9)) +
ggtitle("Linear models of breeding success by species")
library(ggeffects)
#using ggpredict to predict output of model
sp_both <- ggpredict(mixed2, terms = c("temp"))
ggplot(sp_both) +
geom_line(aes(x=x, y=predicted)) + #slope line
geom_ribbon(aes(x=x, ymin = predicted - std.error, ymax=predicted + std.error),
fill = "lightgrey", alpha =.5) + #visualizing error
geom_point(data = sc,
aes(x=temp, y=bs, color=species)) +
labs(x="temperature (scaled)", y = "breeding success", title = "temp explains some variance in auk breeding success") +
scale_color_manual(values = birdpal) +
theme_bw()
plot(mixed2)
qqnorm(resid(mixed2))
# qqplots show how the data produced by a model compare to a theoretical normal distribution. A perfect qq plot would show a 45 degree line from lower left to upper right; our model's output adheres somewhat to the line. Our model is pretty good, but we see some deviance from normal around the extremes.
library(lme4)
#here's how to read our model from left to right:
#we're seeing how bs (breeding success) is explained by temperature -
#and randomizing intercepts based on year and species.
mixed2 <- lmer(bs ~ temp + (1|nyear) + (1|species), data = sc)
summary(mixed2)
templine <- lm(temp ~ year, data = sc)
summary(templine)
ggplot(sc, aes(y = temp, x = year)) +
geom_smooth(method = "lm", se = TRUE) +
geom_point() +
theme_bw()
ggplot(sc, aes(x=temp, y= bs, color = species)) +
geom_point() +
theme_bw() +
scale_color_manual(values = birdpal) +
labs(x= "temperature (standard deviations)", y="breeding success", title = "how temperature affects breeding success by species")
#shags are on a different track then the other auks, so we'll exclude them from
#this analysis
sc <- success %>%
filter(species != "Shag")
#we'll use maximum june temperature as our climate indicator:
climate <- read.csv("clim_east_Scotland.csv")
#pulling out year & june max temp:
june <- climate %>%
filter(var == "tmax") %>%
select(Year, JUN) %>%
mutate(Year = as.numeric(Year)) %>%
filter(Year %in% sc$year)
#a function to find & assign temperature:
find_temp <- function(year) {
temperature <- june[june$Year == year,2]
}
#moving rowwise to assign temperature by year:
sc <- sc %>%
mutate(year = as.numeric(year)) %>%
rowwise() %>%
mutate(temp = ifelse(year %in% unique(june$Year),
find_temp(year),
NA)) %>%
ungroup()
#and modify sc to exclude years with no temperature data, and a little renaming for clarity:
sc <- sc %>%
filter(year >= 1986) %>%
rename(bs = value)
#adding a normalized year (ie, 1,2,3 etc rather than 1985...)
sc <- sc %>%
mutate(nyear = as.factor(year-1985))
#and scaling temperature so the mean is 0 and variation is represented by
#std deviations.
sc$temp <- scale(sc$temp, center = TRUE, scale = TRUE)
#let's visualize how temperature effects breeding success by species!
ggplot(sc, aes(x = temp, y = bs, color = species)) +
geom_point() +
facet_wrap(~species) +
theme_bw() +
scale_color_manual(values = birdpal) +
theme(legend.position = "none") +
labs(x= "temperature (standard deviations)", y="breeding success", title = "how temperature affects breeding success by species")
#visualizing our basic linear models
ggplot(success, aes(x=year, y=value, color=species)) +
geom_point(alpha = .4) +
geom_smooth(method = "lm", se=TRUE, alpha=.2) +
theme_bw() +
scale_color_manual(values=birdpal) +
ylab("breeding success") +
theme(legend.position = c(.1,.70),
legend.text = element_text(size=8),
legend.title = element_text(size=9)) +
ggtitle("Linear models of breeding success by species")
bird_list <- unique(br$species)
t <- c("species", "slope", "conflo", "confhi", "r2", "adj r2", "pval")
r <- data.frame("species", "slope", "conflo", "confhi", "r2", "adj r2", "pval")
names(r) <- t
for (b in 1:length(bird_list)) {
bird <- bird_list[b]
df <- success %>%
filter(species == bird)
line <- lm(value ~ year, data = df)
slope <- round(tidy(line)[2,2],5)
conflo <- round(confint(line)[2,1],5)
confhi <- round(confint(line)[2,2],5)
r2 <- round(summary(line)$r.squared,5)
r2a <- round(summary(line)$adj.r.squared,5)
pval <- round(tidy(line)[2,5],5)
newvector <- c(bird, slope, conflo, confhi, r2, r2a, pval)
names(newvector) <- t
r <- rbind(r, newvector)
}
r <- r[-1,]
r %>%
mutate(confhi = as.numeric(confhi),
conflo = as.numeric(conflo),
conf.range = (confhi-conflo))
breeding <- read.csv("IMLOTSBSDataset1982-2016.csv")
# the data is in wide format, so we'll pivot it to make a "species" column,
#and use regex to assign new, accurate column names.
br <- breeding %>%
pivot_longer(
cols = 2:13,
names_to = c("species", "type"),
names_pattern = "([\\w]+)[.]([\\w]+)")
#now we'll pare it down to breeding success data:
success <- br %>%
filter(type == "BS")
#looks good!
birdpal <- c(Guillemot = "#F7DEDE", Razorbill = "#BAD5EE", Puffin = "#5071A0", Shag = "#111A36", Kittiwake = "#922A1C", Fulmar = "#F06A60")
ggplot(success, aes(x=year, y=value, color = species)) +
geom_point() +
theme_bw() +
scale_color_manual(values = birdpal) +
ylab("breeding success")
